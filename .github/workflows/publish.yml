name: Publish to crates.io

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (test only)'
        required: false
        default: false
        type: boolean
      crate_name:
        description: 'Specific crate to publish (for workspaces)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: cargo
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify package
        run: cargo package --verbose

      - name: Run tests
        run: cargo test --all-features

      - name: Dry run publish
        if: ${{ github.event.inputs.dry_run == 'true' || github.event_name == 'push' }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "Running in dry-run mode..."
            cargo publish --dry-run
          else
            echo "Dry-run before actual publish..."
            cargo publish --dry-run
          fi

      - name: Publish crate
        if: ${{ github.event.inputs.dry_run != 'true' && github.event_name == 'push' }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          if [[ -n "${{ github.event.inputs.crate_name }}" ]]; then
            cargo publish -p ${{ github.event.inputs.crate_name }}
          else
            cargo publish
          fi

      - name: Generate release notes from CHANGELOG.md
        if: success() && github.event_name == 'push'
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Preparing release notes for version $VERSION"
          awk -v ver="$VERSION" '
            BEGIN { print "# Changelog\n" }
            $0 ~ "^## \\[" ver "\\]" { p=1; print; next }
            p && $0 ~ /^## / { exit }
            p { print }
          ' CHANGELOG.md > RELEASE_BODY.md
          echo "Generated release body:" && sed -n '1,120p' RELEASE_BODY.md

      - name: Create GitHub Release with changelog
        if: success() && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: RELEASE_BODY.md
          files: |
            CHANGELOG.md
          draft: false
          prerelease: false