include!(concat!(env!("OUT_DIR"), "/remnawave_api.rs"));
include!(concat!(env!("OUT_DIR"), "/controllers.rs"));

use reqwest::header::{HeaderMap, HeaderValue, AUTHORIZATION};

/// Thin wrapper around the generated client to inject auth & base URL.
#[derive(Clone)]
pub struct RemnawaveClient {
    client: Client,
}

impl RemnawaveClient {
    pub fn new(base_url: impl Into<String>, token: impl Into<String>) -> anyhow::Result<Self> {
        let mut headers = HeaderMap::new();
        headers.insert(
            AUTHORIZATION,
            HeaderValue::from_str(&format!("Bearer {}", token.into()))?,
        );

        let http = reqwest::ClientBuilder::new()
            .default_headers(headers)
            .build()?;

        Ok(Self {
            client: Client::new_with_client(&base_url.into(), http),
        })
    }

    /// Access the low-level, strongly typed API generated by Progenitor.
    pub fn api(&self) -> &Client {
        &self.client
    }
}